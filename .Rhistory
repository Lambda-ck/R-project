most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent
table(company_data$IPC_code4)
company_data$IPC_code4
View(company_data)
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
View(data_combined)
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
head(data_combined)
data_combined<- dataframe()
data_combined<- data.frame()
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
source("ProjetR.R")
source("ProjetR.R")
knitr::kable(base_brevets[1,], format = "html")
```{r intro1, echo=TRUE, message = FALSE, eval = TRUE}
describe(base_brevets)
source("ProjetR.R")
library(psych)
source("ProjetR.R")
install.packages('psych')
library(psych)
describe(base_brevets[1:20,])
base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents))
install.packages('psych')
install.packages("psych")
library(psych)
base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents))
library(dplyr)
base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents))
first_stat
first_stat = base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents))
sort(first_stat)
first_stat = base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents))
sorted(first_stat)
order(first_stat)
first_stat
first_stat = base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents)) %>%
arrange(desc(sum))
first_stat
View(base_brevets)
first_stat[1:10]
first_stat[1:10,]
pie(first_stat, labels = first_stat[:,1], main="Pie Chart of Countries")
pie(first_stat, labels = first_stat[,1], main="Pie Chart of Countries")
first_stat[,1]
pie(first_stat, labels = y, main="Pie Chart of Countries")
pie(first_stat, labels = y, main="Pie Chart of Countries")
pie(x, labels = y, main="Pie Chart of Countries")
x = first_stat[,2]
y = first_stat[,1]
pie(x, labels = y, main="Pie Chart of Countries")
x
pie(as.vector(x), labels = y, main="Pie Chart of Countries")
pie(asvector(x), labels = y, main="Pie Chart of Countries")
pie(as.vector(x), labels = y, main="Pie Chart of Countries")
pie(x, labels = y, main="Pie Chart of Countries")
pie(as.list(x), labels = y, main="Pie Chart of Countries")
as.vector(x)
pie(as.vector(x), labels = y, main="Pie Chart of Countries")
length(x)
length(as.vector(x))
length(as.list(x))
length(split(x))
x = first_stat[,2][1]
x
x
x
x = first_stat[,2][1:12]
x
x = first_stat[,2][1:12]
x
y = first_stat[,1]
pie(as.vector(x), labels = y, main="Pie Chart of Countries")
pie(as.vector, labels = y, main="Pie Chart of Countries")
pie(x, labels = y, main="Pie Chart of Countries")
x = first_stat[,2]
x
show(x)
x
x = pull(first_stat[,2])
x
y = first_stat[,1]
pie(x, labels = y, main="Pie Chart of Countries")
x = c(x[x > 1000], sum(x[x<1000]))
y = first_stat[,1]
pie(x, labels = y, main="Pie Chart of Countries")
x
pie(x, labels = y, main="Pie of patents")
View(base_brevets)
second_stat = base_brevets[,1:3] %>%
summarize(sum = sum(n_patents),
arrange(desc(sum))
second_stat
second_stat = base_brevets[,1:3] %>%
group_by(firm_name,ipc_main_code) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents)) %>%
arrange(desc(sum))
second_stat
second_stat = base_brevets[,1:3] %>%
group_by(ipc_main_code) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents)) %>%
arrange(desc(sum))
second_stat
second_stat = base_brevets[,1:3] %>%
group_by(ipc_main_code) %>%
summarize(sum = sum(n_patents)) %>%
arrange(desc(sum))
second_stat
View(ipc_combined)
View(first_stat)
View(data_OECD)
View(data_IPC)
View(data_IPC)
#install.packages('psych')
library(psych)
library(dplyr)
first_stat = base_brevets[,1:2] %>%
group_by(firm_name) %>%
summarize(sum = sum(n_patents),
mean = mean(n_patents)) %>%
arrange(desc(sum))
x = pull(first_stat[,2])
x = c(x[x > 1000], sum(x[x<1000]))
x
y = first_stat[,1]
pie(x, labels = y, main="Pie of patents")
second_stat = base_brevets[,1:3] %>%
group_by(ipc_main_code) %>%
summarize(sum = sum(n_patents)) %>%
arrange(desc(sum))
second_stat
second_stat
library(dplyr)
# Initialize an empty data frame
base_brevets <- data.frame(
firm_name = character(),
n_patents = integer(),
ipc_main_code = character(),
ipc_main_desc = character(),
ipc_second_code = character(),
ipc_second_desc = character(),
addr_city_main = character(),
addr_dept_main = character(),
stringsAsFactors = FALSE
)
### Combine IPC files into a single data frame
files <- list.files(pattern = "^EN_ipc.*\\.txt$", recursive = TRUE)
ipc_combined <- files %>%
lapply(read.table, sep = "\t", header = FALSE, stringsAsFactors = FALSE) %>%
bind_rows() %>%
setNames(c("IPC_code14", "Description"))
# Extract IPC4 codes and remove incomplete ones
ipc_combined <- ipc_combined %>%
mutate(IPC_code4 = substr(IPC_code14, 1, 4)) %>%
filter(nchar(IPC_code4) == 4)
# Keep unique IPC4 with first description
ipc_unique <- ipc_combined %>%
distinct(IPC_code4, .keep_all = TRUE) %>%
select(IPC_code4, Description)
### Read and preprocess OECD data
data_OECD <- read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE)
data_OECD <- data_OECD %>%
mutate(year = as.numeric(substr(app_nbr, 3, 6))) %>%
filter(ctry_code == "FR", year >= 2010, year <= 2020)
data_IPC <- read.csv("202202_EPO_IPC_small.txt", sep = ",", stringsAsFactors = FALSE) %>%
mutate(IPC_code4 = substr(IPC, 1, 4))
# Merge OECD and IPC data
data_combined <- data_OECD %>%
left_join(data_IPC, by = "appln_id") %>%
select(-IPC)
### Normalize company names
data_combined <- data_combined %>%
mutate(app_name = tolower(app_name),
app_name = gsub(",? sa| inc\\.| sarl|\\(société par actions simplifiée\\)|\\(s\\.?a\\.?s\\.?\\)", "", app_name, ignore.case = TRUE),
app_name = iconv(app_name, from = "UTF-8", to = "ASCII//TRANSLIT"),
app_name = gsub("[-–]", "", app_name),
app_name = gsub(",", "", app_name),
app_name = trimws(app_name))
### Aggregate data for base_brevets
base_brevets <- data_combined %>%
group_by(app_name) %>%
summarize(
n_patents = n(),
addr_city_main = names(which.max(table(city))),
addr_dept_main = names(which.max(table(reg_code))),
ipc_main_code = names(which.max(table(IPC_code4))),
ipc_second_code = names(sort(table(IPC_code4), decreasing = TRUE)[2]),
.groups = 'drop'
) %>%
mutate(
ipc_main_desc = ipc_unique$Description[match(ipc_main_code, ipc_unique$IPC_code4)],
ipc_second_desc = ipc_unique$Description[match(ipc_second_code, ipc_unique$IPC_code4)]
)
# Inspect the resulting data frame
head(base_brevets)
base_brevets <- data.frame(
firm_name = character(),     # Nom de l'entreprise
n_patents = integer(),       # Nombre de brevets
ipc_main_code = character(), # Code de la classe IPC principale
ipc_main_desc = character(), # Description de la classe IPC principale
ipc_second_code = character(), # Code de la seconde classe IPC
ipc_second_desc = character(), # Description de la seconde classe IPC
addr_city_main = character(), # Ville principale de l'entreprise
addr_dept_main = character(), # Département principal de l'entreprise
stringsAsFactors = FALSE
)
files <- list.files(pattern = "^EN_ipc.*\\.txt$", recursive = TRUE) #on importe tous les fichiers IPC voulus
data_list <- lapply(files, read.table, sep = "\t", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame
# On combine tous les data frames de la liste en un seul data frame
ipc_combined <- do.call(rbind, data_list)
# On nomme les colonnes
colnames(ipc_combined) <- c("IPC_code14", "Description")
# On extrait les 4 premiers caractères pour obtenir le code IPC4
ipc_combined$IPC_code4 <- substr(ipc_combined$IPC_code14, 1, 4)
#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc
ipc_combined <- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]
# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée
ipc_unique <- ipc_combined[!duplicated(ipc_combined$IPC_code4), c("IPC_code4", "Description")]
head(ipc_unique)
data_OECD<-read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
data_OECD$year<-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année
data_OECD_filtered<-subset(data_OECD, ctry_code == "FR" & year >= 2010 & year <= 2020) #en respectant les conditions
data_IPC<-read.csv("202202_EPO_IPC_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
data_IPC$IPC_code4<- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
data_combined<- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop
# On convertit en minuscules les noms d'entreprise pour eviter les confusions
data_combined$app_name <- tolower(data_combined$app_name)
data_combined$app_name <- gsub(",? sa| inc\\.| sarl|\\(société par actions simplifiée\\)|\\(s\\.?a\\.?s\\.?\\)", "", data_combined$app_name, ignore.case = TRUE)
# Supprimer les accents (aussi grâce à chat gpt):
data_combined$app_name <- iconv(data_combined$app_name, from = "UTF-8", to = "ASCII//TRANSLIT")
#supprimer les tirets du 6 et du 8 (idem avec chat gpt):
data_combined$app_name <- gsub("[-–]", "", data_combined$app_name)
#supprimer les virgules
data_combined$app_name <- gsub(",", "", data_combined$app_name)
data_combined$app_name <- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom
all_companies <- unique(data_combined$app_name) #on prend la liste des companies uniques
for(company in all_companies){
#on stocke les données de la companie actuelle
company_data <- subset(data_combined, app_name == company)
#on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.
# Nombre de brevets
n_patents <- nrow(company_data)
most_frequent_city<- names(which.max(table(company_data$city)))  # Ville la plus fréquente
#table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.
most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent
most_frequent_ipc <- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent
#On utilise "sort" pour trier les IPC par occurences
second_most_frequent_ipc <- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]
second_most_frequent_ipc <- names(second_most_frequent_ipc)# second IPC le plus fréquent
###On relie maintenant les codes IPC aux descriptions :
# Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise
ipc_main_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]
ipc_second_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]
#Ajout des résultats au data frame
base_brevets <- rbind(base_brevets, data.frame(
firm_name = company,
n_patents = n_patents,
ipc_main_code = most_frequent_ipc,
ipc_main_desc = ifelse(length(ipc_main_desc) > 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout
ipc_second_code = second_most_frequent_ipc,
ipc_second_desc = ifelse(length(ipc_second_desc) > 0, ipc_second_desc, NA),#idem ici
addr_city_main = most_frequent_city,
addr_dept_main = most_frequent_dept,
stringsAsFactors = FALSE
))
}
base_brevets <- data.frame(
firm_name = character(),     # Nom de l'entreprise
n_patents = integer(),       # Nombre de brevets
ipc_main_code = character(), # Code de la classe IPC principale
ipc_main_desc = character(), # Description de la classe IPC principale
ipc_second_code = character(), # Code de la seconde classe IPC
ipc_second_desc = character(), # Description de la seconde classe IPC
addr_city_main = character(), # Ville principale de l'entreprise
addr_dept_main = character(), # Département principal de l'entreprise
stringsAsFactors = FALSE
)
### Manipulation des descriptions liées aux IPC
files <- list.files(pattern = "^EN_ipc.*\\.txt$", recursive = TRUE) #on importe tous les fichiers IPC voulus
data_list <- lapply(files, read.table, sep = "\t", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame
# On combine tous les data frames de la liste en un seul data frame
ipc_combined <- do.call(rbind, data_list)
# On nomme les colonnes
colnames(ipc_combined) <- c("IPC_code14", "Description")
#head(ipc_combined)
# On extrait les 4 premiers caractères pour obtenir le code IPC4
ipc_combined$IPC_code4 <- substr(ipc_combined$IPC_code14, 1, 4)
#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc
ipc_combined <- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]
#head(ipc_combined)
# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée
ipc_unique <- ipc_combined[!duplicated(ipc_combined$IPC_code4), c("IPC_code4", "Description")]
head(ipc_unique)
#rendez vous à la fin du code pour utiliser ces ipc_unique en les reliant aux entreprises.
### Manipulation des Informations des entreprises
data_OECD<-read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
#head(data_OECD)
#str(data_OECD)        # Affiche la structure du dataframe
#summary(data_OECD)    # Affiche le résumé statistique de chaque colonne
data_OECD$year<-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année
data_OECD_filtered<-subset(data_OECD, ctry_code == "FR" & year >= 2010 & year <= 2020) #en respectant les conditions
#head(data_OECD_filtered)
data_IPC<-read.csv("202202_EPO_IPC_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
#head(data_IPC)
data_IPC$IPC_code4<- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4
#head(data_IPC)
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
#head(data_combined)
data_combined<- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop
#head(data_combined)
### Remplacer les variantes qu'on connaît grâce aux exemples de la consigne :
# On convertit en minuscules les noms d'entreprise pour eviter les confusions
data_combined$app_name <- tolower(data_combined$app_name)
data_combined$app_name <- gsub(",? sa| inc\\.| sarl|\\(société par actions simplifiée\\)|\\(s\\.?a\\.?s\\.?\\)", "", data_combined$app_name, ignore.case = TRUE)
#j'ai trouvé ,? et \\ à l'aide de chat gpt.
# Supprimer les accents (aussi grâce à chat gpt):
data_combined$app_name <- iconv(data_combined$app_name, from = "UTF-8", to = "ASCII//TRANSLIT")
#supprimer les tirets du 6 et du 8 (idem avec chat gpt):
data_combined$app_name <- gsub("[-–]", "", data_combined$app_name)
#supprimer les virgules
data_combined$app_name <- gsub(",", "", data_combined$app_name)
data_combined$app_name <- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom
all_companies <- unique(data_combined$app_name) #on prend la liste des companies uniques
for(company in all_companies){
#on stocke les données de la companie actuelle
company_data <- subset(data_combined, app_name == company)
#on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.
# Nombre de brevets
n_patents <- nrow(company_data)
most_frequent_city<- names(which.max(table(company_data$city)))  # Ville la plus fréquente
#table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.
most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent
most_frequent_ipc <- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent
#On utilise "sort" pour trier les IPC par occurences
second_most_frequent_ipc <- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]
second_most_frequent_ipc <- names(second_most_frequent_ipc)# second IPC le plus fréquent
###On relie maintenant les codes IPC aux descriptions :
# Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise
ipc_main_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]
ipc_second_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]
#Ajout des résultats au data frame
base_brevets <- rbind(base_brevets, data.frame(
firm_name = company,
n_patents = n_patents,
ipc_main_code = most_frequent_ipc,
ipc_main_desc = ifelse(length(ipc_main_desc) > 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout
ipc_second_code = second_most_frequent_ipc,
ipc_second_desc = ifelse(length(ipc_second_desc) > 0, ipc_second_desc, NA),#idem ici
addr_city_main = most_frequent_city,
addr_dept_main = most_frequent_dept,
stringsAsFactors = FALSE
))
}
base_brevets <- data.frame(
firm_name = character(),     # Nom de l'entreprise
n_patents = integer(),       # Nombre de brevets
ipc_main_code = character(), # Code de la classe IPC principale
ipc_main_desc = character(), # Description de la classe IPC principale
ipc_second_code = character(), # Code de la seconde classe IPC
ipc_second_desc = character(), # Description de la seconde classe IPC
addr_city_main = character(), # Ville principale de l'entreprise
addr_dept_main = character(), # Département principal de l'entreprise
stringsAsFactors = FALSE
)
files <- list.files(pattern = "^EN_ipc.*\\.txt$", recursive = TRUE) #on importe tous les fichiers IPC voulus
data_list <- lapply(files, read.table, sep = "\t", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame
# On combine tous les data frames de la liste en un seul data frame
ipc_combined <- do.call(rbind, data_list)
# On nomme les colonnes
colnames(ipc_combined) <- c("IPC_code14", "Description")
# On extrait les 4 premiers caractères pour obtenir le code IPC4
ipc_combined$IPC_code4 <- substr(ipc_combined$IPC_code14, 1, 4)
#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc
ipc_combined <- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]
# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée
ipc_unique <- ipc_combined[!duplicated(ipc_combined$IPC_code4), c("IPC_code4", "Description")]
data_OECD<-read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
data_OECD<-read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
data_OECD$year<-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année
data_OECD_filtered<-subset(data_OECD, ctry_code == "FR" & year >= 2010 & year <= 2020) #en respectant les conditions
data_IPC<-read.csv("202202_EPO_IPC_small.txt", sep = ",", stringsAsFactors = FALSE) #importation
data_IPC$IPC_code4<- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4
data_combined<- merge(data_OECD_filtered, data_IPC, by = "appln_id", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id
data_combined<- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop
# On convertit en minuscules les noms d'entreprise pour eviter les confusions
data_combined$app_name <- tolower(data_combined$app_name)
data_combined$app_name <- gsub(",? sa| inc\\.| sarl|\\(société par actions simplifiée\\)|\\(s\\.?a\\.?s\\.?\\)", "", data_combined$app_name, ignore.case = TRUE)
# Supprimer les accents (aussi grâce à chat gpt):
data_combined$app_name <- iconv(data_combined$app_name, from = "UTF-8", to = "ASCII//TRANSLIT")
#supprimer les tirets du 6 et du 8 (idem avec chat gpt):
data_combined$app_name <- gsub("[-–]", "", data_combined$app_name)
#supprimer les virgules
data_combined$app_name <- gsub(",", "", data_combined$app_name)
data_combined$app_name <- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom
all_companies <- unique(data_combined$app_name) #on prend la liste des companies uniques
for(company in all_companies){
#on stocke les données de la companie actuelle
company_data <- subset(data_combined, app_name == company)
#on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.
# Nombre de brevets
n_patents <- nrow(company_data)
most_frequent_city<- names(which.max(table(company_data$city)))  # Ville la plus fréquente
#table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.
most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent
most_frequent_ipc <- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent
#On utilise "sort" pour trier les IPC par occurences
second_most_frequent_ipc <- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]
second_most_frequent_ipc <- names(second_most_frequent_ipc)# second IPC le plus fréquent
###On relie maintenant les codes IPC aux descriptions :
# Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise
ipc_main_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]
ipc_second_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]
#Ajout des résultats au data frame
base_brevets <- rbind(base_brevets, data.frame(
firm_name = company,
n_patents = n_patents,
ipc_main_code = most_frequent_ipc,
ipc_main_desc = ifelse(length(ipc_main_desc) > 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout
ipc_second_code = second_most_frequent_ipc,
ipc_second_desc = ifelse(length(ipc_second_desc) > 0, ipc_second_desc, NA),#idem ici
addr_city_main = most_frequent_city,
addr_dept_main = most_frequent_dept,
stringsAsFactors = FALSE
))
}
edit(base_brevets)
library(dplyr)
# Initialize an empty data frame
base_brevets <- data.frame(
firm_name = character(),
n_patents = integer(),
ipc_main_code = character(),
ipc_main_desc = character(),
ipc_second_code = character(),
ipc_second_desc = character(),
addr_city_main = character(),
addr_dept_main = character(),
stringsAsFactors = FALSE
)
### Combine IPC files into a single data frame
files <- list.files(pattern = "^EN_ipc.*\\.txt$", recursive = TRUE)
ipc_combined <- files %>%
lapply(read.table, sep = "\t", header = FALSE, stringsAsFactors = FALSE) %>%
bind_rows() %>%
setNames(c("IPC_code14", "Description"))
# Extract IPC4 codes and remove incomplete ones
ipc_combined <- ipc_combined %>%
mutate(IPC_code4 = substr(IPC_code14, 1, 4)) %>%
filter(nchar(IPC_code4) == 4)
# Keep unique IPC4 with first description
ipc_unique <- ipc_combined %>%
distinct(IPC_code4, .keep_all = TRUE) %>%
select(IPC_code4, Description)
### Read and preprocess OECD data
data_OECD <- read.csv("202202_EPO_App_reg_small.txt", sep = ",", stringsAsFactors = FALSE)
data_OECD <- data_OECD %>%
mutate(year = as.numeric(substr(app_nbr, 3, 6))) %>%
filter(ctry_code == "FR", year >= 2010, year <= 2020)
data_IPC <- read.csv("202202_EPO_IPC_small.txt", sep = ",", stringsAsFactors = FALSE) %>%
mutate(IPC_code4 = substr(IPC, 1, 4))
# Merge OECD and IPC data
data_combined <- data_OECD %>%
left_join(data_IPC, by = "appln_id") %>%
select(-IPC)
### Normalize company names
data_combined <- data_combined %>%
mutate(app_name = tolower(app_name),
app_name = gsub(",? sa| inc\\.| sarl|\\(société par actions simplifiée\\)|\\(s\\.?a\\.?s\\.?\\)", "", app_name, ignore.case = TRUE),
app_name = iconv(app_name, from = "UTF-8", to = "ASCII//TRANSLIT"),
app_name = gsub("[-–]", "", app_name),
app_name = gsub(",", "", app_name),
app_name = trimws(app_name))
### Aggregate data for base_brevets
base_brevets <- data_combined %>%
group_by(app_name) %>%
summarize(
n_patents = n(),
addr_city_main = names(which.max(table(city))),
addr_dept_main = names(which.max(table(reg_code))),
ipc_main_code = names(which.max(table(IPC_code4))),
ipc_second_code = names(sort(table(IPC_code4), decreasing = TRUE)[2]),
.groups = 'drop'
) %>%
mutate(
ipc_main_desc = ipc_unique$Description[match(ipc_main_code, ipc_unique$IPC_code4)],
ipc_second_desc = ipc_unique$Description[match(ipc_second_code, ipc_unique$IPC_code4)]
)
# Inspect the resulting data frame
head(base_brevets)
# Inspect the resulting data frame
edit(base_brevets)
