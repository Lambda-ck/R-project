{"title":"R project","markdown":{"yaml":{"title":"R project","html":{"code-background":true}},"headingText":"Manipulation des descriptions liées aux IPC","containsRefs":false,"markdown":"\n\nWelcome on our website\n\n```{{r}}\nbase_brevets <- data.frame(\n  firm_name = character(),     # Nom de l'entreprise\n  n_patents = integer(),       # Nombre de brevets\n  ipc_main_code = character(), # Code de la classe IPC principale\n  ipc_main_desc = character(), # Description de la classe IPC principale\n  ipc_second_code = character(), # Code de la seconde classe IPC\n  ipc_second_desc = character(), # Description de la seconde classe IPC\n  addr_city_main = character(), # Ville principale de l'entreprise\n  addr_dept_main = character(), # Département principal de l'entreprise\n  stringsAsFactors = FALSE\n)\n\nfiles <- list.files(pattern = \"^EN_ipc.*\\\\.txt$\", recursive = TRUE) #on importe tous les fichiers IPC voulus\ndata_list <- lapply(files, read.table, sep = \"\\t\", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame\n\n# On combine tous les data frames de la liste en un seul data frame\nipc_combined <- do.call(rbind, data_list)\n\n# On nomme les colonnes\ncolnames(ipc_combined) <- c(\"IPC_code14\", \"Description\")\n\n#head(ipc_combined)\n\n# On extrait les 4 premiers caractères pour obtenir le code IPC4\nipc_combined$IPC_code4 <- substr(ipc_combined$IPC_code14, 1, 4)\n\n#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc\nipc_combined <- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]\n\n#head(ipc_combined)\n\n# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée\nipc_unique <- ipc_combined[!duplicated(ipc_combined$IPC_code4), c(\"IPC_code4\", \"Description\")]\n\nhead(ipc_unique)\n\n#rendez vous à la fin du code pour utiliser ces ipc_unique en les reliant aux entreprises.\n\n\n\n### Manipulation des Informations des entreprises\n\n\ndata_OECD<-read.csv(\"202202_EPO_App_reg_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_OECD)\n#str(data_OECD)        # Affiche la structure du dataframe\n#summary(data_OECD)    # Affiche le résumé statistique de chaque colonne\n\ndata_OECD$year<-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année\ndata_OECD_filtered<-subset(data_OECD, ctry_code == \"FR\" & year >= 2010 & year <= 2020) #en respectant les conditions\n\n#head(data_OECD_filtered)\n\ndata_IPC<-read.csv(\"202202_EPO_IPC_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_IPC)\n\ndata_IPC$IPC_code4<- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4\n\n#head(data_IPC)\n\ndata_combined<- merge(data_OECD_filtered, data_IPC, by = \"appln_id\", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id\n#head(data_combined)\n\ndata_combined<- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop\n#head(data_combined)\n\n\n\n### Remplacer les variantes qu'on connaît grâce aux exemples de la consigne :\n\n# On convertit en minuscules les noms d'entreprise pour eviter les confusions\ndata_combined$app_name <- tolower(data_combined$app_name) \n\ndata_combined$app_name <- gsub(\",? sa| inc\\\\.| sarl|\\\\(société par actions simplifiée\\\\)|\\\\(s\\\\.?a\\\\.?s\\\\.?\\\\)\", \"\", data_combined$app_name, ignore.case = TRUE)\n#j'ai trouvé ,? et \\\\ à l'aide de chat gpt.\n\n# Supprimer les accents (aussi grâce à chat gpt):\ndata_combined$app_name <- iconv(data_combined$app_name, from = \"UTF-8\", to = \"ASCII//TRANSLIT\")\n\n#supprimer les tirets du 6 et du 8 (idem avec chat gpt):\ndata_combined$app_name <- gsub(\"[-–]\", \"\", data_combined$app_name)\n\n#supprimer les virgules\ndata_combined$app_name <- gsub(\",\", \"\", data_combined$app_name)\n\n\ndata_combined$app_name <- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom\n\n\n\nall_companies <- unique(data_combined$app_name) #on prend la liste des companies uniques\n\nfor(company in all_companies){\n  #on stocke les données de la companie actuelle\n  company_data <- subset(data_combined, app_name == company)\n  #on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.\n  # Nombre de brevets\n  n_patents <- nrow(company_data)\n  \n  most_frequent_city<- names(which.max(table(company_data$city)))  # Ville la plus fréquente\n  #table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.\n  \n  most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent\n  \n  most_frequent_ipc <- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent\n  \n  #On utilise \"sort\" pour trier les IPC par occurences \n  second_most_frequent_ipc <- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]\n  second_most_frequent_ipc <- names(second_most_frequent_ipc)# second IPC le plus fréquent\n  \n  \n  ###On relie maintenant les codes IPC aux descriptions :\n  \n  # Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise\n  ipc_main_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]\n  ipc_second_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]\n  \n  #Ajout des résultats au data frame\n  base_brevets <- rbind(base_brevets, data.frame(\n    firm_name = company,\n    n_patents = n_patents,\n    ipc_main_code = most_frequent_ipc,\n    ipc_main_desc = ifelse(length(ipc_main_desc) > 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout\n    ipc_second_code = second_most_frequent_ipc,\n    ipc_second_desc = ifelse(length(ipc_second_desc) > 0, ipc_second_desc, NA),#idem ici \n    addr_city_main = most_frequent_city,\n    addr_dept_main = most_frequent_dept,\n    stringsAsFactors = FALSE\n  ))\n}\n\nedit(base_brevets)\n\n\n\n\n```\n\n","srcMarkdownNoYaml":"\n\nWelcome on our website\n\n```{{r}}\nbase_brevets <- data.frame(\n  firm_name = character(),     # Nom de l'entreprise\n  n_patents = integer(),       # Nombre de brevets\n  ipc_main_code = character(), # Code de la classe IPC principale\n  ipc_main_desc = character(), # Description de la classe IPC principale\n  ipc_second_code = character(), # Code de la seconde classe IPC\n  ipc_second_desc = character(), # Description de la seconde classe IPC\n  addr_city_main = character(), # Ville principale de l'entreprise\n  addr_dept_main = character(), # Département principal de l'entreprise\n  stringsAsFactors = FALSE\n)\n### Manipulation des descriptions liées aux IPC\n\nfiles <- list.files(pattern = \"^EN_ipc.*\\\\.txt$\", recursive = TRUE) #on importe tous les fichiers IPC voulus\ndata_list <- lapply(files, read.table, sep = \"\\t\", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame\n\n# On combine tous les data frames de la liste en un seul data frame\nipc_combined <- do.call(rbind, data_list)\n\n# On nomme les colonnes\ncolnames(ipc_combined) <- c(\"IPC_code14\", \"Description\")\n\n#head(ipc_combined)\n\n# On extrait les 4 premiers caractères pour obtenir le code IPC4\nipc_combined$IPC_code4 <- substr(ipc_combined$IPC_code14, 1, 4)\n\n#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc\nipc_combined <- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]\n\n#head(ipc_combined)\n\n# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée\nipc_unique <- ipc_combined[!duplicated(ipc_combined$IPC_code4), c(\"IPC_code4\", \"Description\")]\n\nhead(ipc_unique)\n\n#rendez vous à la fin du code pour utiliser ces ipc_unique en les reliant aux entreprises.\n\n\n\n### Manipulation des Informations des entreprises\n\n\ndata_OECD<-read.csv(\"202202_EPO_App_reg_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_OECD)\n#str(data_OECD)        # Affiche la structure du dataframe\n#summary(data_OECD)    # Affiche le résumé statistique de chaque colonne\n\ndata_OECD$year<-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année\ndata_OECD_filtered<-subset(data_OECD, ctry_code == \"FR\" & year >= 2010 & year <= 2020) #en respectant les conditions\n\n#head(data_OECD_filtered)\n\ndata_IPC<-read.csv(\"202202_EPO_IPC_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_IPC)\n\ndata_IPC$IPC_code4<- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4\n\n#head(data_IPC)\n\ndata_combined<- merge(data_OECD_filtered, data_IPC, by = \"appln_id\", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id\n#head(data_combined)\n\ndata_combined<- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop\n#head(data_combined)\n\n\n\n### Remplacer les variantes qu'on connaît grâce aux exemples de la consigne :\n\n# On convertit en minuscules les noms d'entreprise pour eviter les confusions\ndata_combined$app_name <- tolower(data_combined$app_name) \n\ndata_combined$app_name <- gsub(\",? sa| inc\\\\.| sarl|\\\\(société par actions simplifiée\\\\)|\\\\(s\\\\.?a\\\\.?s\\\\.?\\\\)\", \"\", data_combined$app_name, ignore.case = TRUE)\n#j'ai trouvé ,? et \\\\ à l'aide de chat gpt.\n\n# Supprimer les accents (aussi grâce à chat gpt):\ndata_combined$app_name <- iconv(data_combined$app_name, from = \"UTF-8\", to = \"ASCII//TRANSLIT\")\n\n#supprimer les tirets du 6 et du 8 (idem avec chat gpt):\ndata_combined$app_name <- gsub(\"[-–]\", \"\", data_combined$app_name)\n\n#supprimer les virgules\ndata_combined$app_name <- gsub(\",\", \"\", data_combined$app_name)\n\n\ndata_combined$app_name <- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom\n\n\n\nall_companies <- unique(data_combined$app_name) #on prend la liste des companies uniques\n\nfor(company in all_companies){\n  #on stocke les données de la companie actuelle\n  company_data <- subset(data_combined, app_name == company)\n  #on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.\n  # Nombre de brevets\n  n_patents <- nrow(company_data)\n  \n  most_frequent_city<- names(which.max(table(company_data$city)))  # Ville la plus fréquente\n  #table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.\n  \n  most_frequent_dept <- names(which.max(table(company_data$reg_code))) #département le plus fréquent\n  \n  most_frequent_ipc <- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent\n  \n  #On utilise \"sort\" pour trier les IPC par occurences \n  second_most_frequent_ipc <- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]\n  second_most_frequent_ipc <- names(second_most_frequent_ipc)# second IPC le plus fréquent\n  \n  \n  ###On relie maintenant les codes IPC aux descriptions :\n  \n  # Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise\n  ipc_main_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]\n  ipc_second_desc <- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]\n  \n  #Ajout des résultats au data frame\n  base_brevets <- rbind(base_brevets, data.frame(\n    firm_name = company,\n    n_patents = n_patents,\n    ipc_main_code = most_frequent_ipc,\n    ipc_main_desc = ifelse(length(ipc_main_desc) > 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout\n    ipc_second_code = second_most_frequent_ipc,\n    ipc_second_desc = ifelse(length(ipc_second_desc) > 0, ipc_second_desc, NA),#idem ici \n    addr_city_main = most_frequent_city,\n    addr_dept_main = most_frequent_dept,\n    stringsAsFactors = FALSE\n  ))\n}\n\nedit(base_brevets)\n\n\n\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmos","title":"R project","html":{"code-background":true}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}