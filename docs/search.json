[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R project",
    "section": "",
    "text": "Welcome on our website\n```{r}\nbase_brevets &lt;- data.frame(\n  firm_name = character(),     # Nom de l'entreprise\n  n_patents = integer(),       # Nombre de brevets\n  ipc_main_code = character(), # Code de la classe IPC principale\n  ipc_main_desc = character(), # Description de la classe IPC principale\n  ipc_second_code = character(), # Code de la seconde classe IPC\n  ipc_second_desc = character(), # Description de la seconde classe IPC\n  addr_city_main = character(), # Ville principale de l'entreprise\n  addr_dept_main = character(), # Département principal de l'entreprise\n  stringsAsFactors = FALSE\n)\n### Manipulation des descriptions liées aux IPC\n\nfiles &lt;- list.files(pattern = \"^EN_ipc.*\\\\.txt$\", recursive = TRUE) #on importe tous les fichiers IPC voulus\ndata_list &lt;- lapply(files, read.table, sep = \"\\t\", header = FALSE, stringsAsFactors = FALSE)#on les mets en data frame\n\n# On combine tous les data frames de la liste en un seul data frame\nipc_combined &lt;- do.call(rbind, data_list)\n\n# On nomme les colonnes\ncolnames(ipc_combined) &lt;- c(\"IPC_code14\", \"Description\")\n\n#head(ipc_combined)\n\n# On extrait les 4 premiers caractères pour obtenir le code IPC4\nipc_combined$IPC_code4 &lt;- substr(ipc_combined$IPC_code14, 1, 4)\n\n#il reste cependant les codes à 1,2 et 3 caractères, on les enlève donc\nipc_combined &lt;- ipc_combined[nchar(ipc_combined$IPC_code4) == 4, ]\n\n#head(ipc_combined)\n\n# On garde une ligne unique pour chaque IPC_code4 avec sa première description associée\nipc_unique &lt;- ipc_combined[!duplicated(ipc_combined$IPC_code4), c(\"IPC_code4\", \"Description\")]\n\nhead(ipc_unique)\n\n#rendez vous à la fin du code pour utiliser ces ipc_unique en les reliant aux entreprises.\n\n\n\n### Manipulation des Informations des entreprises\n\n\ndata_OECD&lt;-read.csv(\"202202_EPO_App_reg_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_OECD)\n#str(data_OECD)        # Affiche la structure du dataframe\n#summary(data_OECD)    # Affiche le résumé statistique de chaque colonne\n\ndata_OECD$year&lt;-as.numeric(substr(data_OECD$app_nbr, 3, 6))  # Extraire l'année\ndata_OECD_filtered&lt;-subset(data_OECD, ctry_code == \"FR\" & year &gt;= 2010 & year &lt;= 2020) #en respectant les conditions\n\n#head(data_OECD_filtered)\n\ndata_IPC&lt;-read.csv(\"202202_EPO_IPC_small.txt\", sep = \",\", stringsAsFactors = FALSE) #importation\n\n#head(data_IPC)\n\ndata_IPC$IPC_code4&lt;- substr(data_IPC$IPC, 1, 4) #on prend que les IPC4\n\n#head(data_IPC)\n\ndata_combined&lt;- merge(data_OECD_filtered, data_IPC, by = \"appln_id\", all.x = TRUE)#on combine les données des deux data frame par la colonne appln_id\n#head(data_combined)\n\ndata_combined&lt;- subset(data_combined, select = -IPC)#on enlève la colonne IPC qui est en trop\n#head(data_combined)\n\n\n\n### Remplacer les variantes qu'on connaît grâce aux exemples de la consigne :\n\n# On convertit en minuscules les noms d'entreprise pour eviter les confusions\ndata_combined$app_name &lt;- tolower(data_combined$app_name) \n\ndata_combined$app_name &lt;- gsub(\",? sa| inc\\\\.| sarl|\\\\(société par actions simplifiée\\\\)|\\\\(s\\\\.?a\\\\.?s\\\\.?\\\\)\", \"\", data_combined$app_name, ignore.case = TRUE)\n#j'ai trouvé ,? et \\\\ à l'aide de chat gpt.\n\n# Supprimer les accents (aussi grâce à chat gpt):\ndata_combined$app_name &lt;- iconv(data_combined$app_name, from = \"UTF-8\", to = \"ASCII//TRANSLIT\")\n\n#supprimer les tirets du 6 et du 8 (idem avec chat gpt):\ndata_combined$app_name &lt;- gsub(\"[-–]\", \"\", data_combined$app_name)\n\n#supprimer les virgules\ndata_combined$app_name &lt;- gsub(\",\", \"\", data_combined$app_name)\n\n\ndata_combined$app_name &lt;- trimws(data_combined$app_name) #trimws supprime les espaces en début et fin de nom\n\n\n\nall_companies &lt;- unique(data_combined$app_name) #on prend la liste des companies uniques\n\nfor(company in all_companies){\n  #on stocke les données de la companie actuelle\n  company_data &lt;- subset(data_combined, app_name == company)\n  #on a donc pour la companie actuelle un nombre de brevets égal au nombre de lignes de company_data.\n  # Nombre de brevets\n  n_patents &lt;- nrow(company_data)\n  \n  most_frequent_city&lt;- names(which.max(table(company_data$city)))  # Ville la plus fréquente\n  #table(city) trouve le nombre d'occurences de chaque ville et which.max trouve LE plus fréquent.\n  \n  most_frequent_dept &lt;- names(which.max(table(company_data$reg_code))) #département le plus fréquent\n  \n  most_frequent_ipc &lt;- names(which.max(table(company_data$IPC_code4))) #IPC le plus fréquent\n  \n  #On utilise \"sort\" pour trier les IPC par occurences \n  second_most_frequent_ipc &lt;- sort(table(company_data$IPC_code4), decreasing = TRUE)[2]\n  second_most_frequent_ipc &lt;- names(second_most_frequent_ipc)# second IPC le plus fréquent\n  \n  \n  ###On relie maintenant les codes IPC aux descriptions :\n  \n  # Recherche des descriptions pour les IPC principaux et secondaires de chaque entreprise\n  ipc_main_desc &lt;- ipc_unique$Description[ipc_unique$IPC_code4 == most_frequent_ipc]\n  ipc_second_desc &lt;- ipc_unique$Description[ipc_unique$IPC_code4 == second_most_frequent_ipc]\n  \n  #Ajout des résultats au data frame\n  base_brevets &lt;- rbind(base_brevets, data.frame(\n    firm_name = company,\n    n_patents = n_patents,\n    ipc_main_code = most_frequent_ipc,\n    ipc_main_desc = ifelse(length(ipc_main_desc) &gt; 0, ipc_main_desc, NA),#on verifie qu'il y a bien une description partout\n    ipc_second_code = second_most_frequent_ipc,\n    ipc_second_desc = ifelse(length(ipc_second_desc) &gt; 0, ipc_second_desc, NA),#idem ici \n    addr_city_main = most_frequent_city,\n    addr_dept_main = most_frequent_dept,\n    stringsAsFactors = FALSE\n  ))\n}\n\nedit(base_brevets)\n\n\n\n\n```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#sidebar",
    "href": "index.html#sidebar",
    "title": "R project",
    "section": "Sidebar",
    "text": "Sidebar\n\nSidebar Title\nSidebar content"
  },
  {
    "objectID": "index.html#sidebar-title",
    "href": "index.html#sidebar-title",
    "title": "R project",
    "section": "Sidebar Title",
    "text": "Sidebar Title\nSidebar content"
  },
  {
    "objectID": "membre.html",
    "href": "membre.html",
    "title": "Membre du groupe",
    "section": "",
    "text": "##First Name Last name\n##First Name Last name\n##First Name Last name\n##First Name Last name",
    "crumbs": [
      "Acceuil",
      "Membres du groupe"
    ]
  }
]